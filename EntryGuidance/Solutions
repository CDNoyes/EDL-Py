380 BC

1. No reversals, optimal altitude:
switch =  1.28335194e+02   3.91024252e+02 (second switch inactive)
bank = 8.99228648e+01   1.32414062e-01 8.99228648e+01 (third bank inactive)
~856 km downrange flown
+3.34 km final altiude
No margin, single switch

2. No reversals, optimal altitude with fixed bank angles chosen for margin
switch = [ 20.09737598,  139.4887652 ]
bank = [np.radians(30),np.radians(75),np.radians(30)]




# Default NMPC params
Q=np.array([[.1,0],[0,2]]),  dt=2.5,

# Optimized for minimization of lat/lon percentiles
Q=np.array([[7.1,0],[0,.03]]), dt=4.25,

With tighter tolerance
[ 0.04997314  9.36355684  3.08391245]

With actual MC250 in the loop and 1% altitude max + 0.1*lat/lon percs
array([ 0.11097343,  9.15744029,  8.09424251])

MC500, 0.1 tol
[ 3.10823241,  4.19776455,  1.10341674]

MC500, 0.01 tol
[ 1.2615365 ,  8.29414341,  1.15915167]
[ 1.46      ,  7.6       ,  1.096] repeated on laptop, cost = 2.7
# Combined optimization of reversal times, bank angles, and controller

# Solution prior to trigger addition
      fun: 1.2114670835942329
  message: 'Optimization terminated successfully.'
     nfev: 104700
      nit: 697
  success: True
        x: array([  9.29183808e+00,   1.16993103e+02,   1.59447150e+02,
          6.73319176e-01,   1.56897827e+00,   9.93751178e-01,
          1.04070920e-03,   5.12963117e+00,   1.63277499e-01,
          5.00426148e+00])

# ###############################################################
# Finished results with trigger and mean(J) for heavy BC vehicle

  fun: 0.6316827771620076
message: 'Optimization terminated successfully.'
 nfev: 41250
  nit: 274
success: True
    x: array([  26.06441256,  115.16979593,  167.14750033,    0.37717073,
       1.494434  ,    1.06315079,    0.54208874,
       2.31450607,    4.48346113,    8.30596081])

# ###########################################################
# Unfinished results for MSL-class vehicle
input = [  1.14251998e+02   1.69081695e+02   1.39702880e+00   1.03505526e+00
   4.77871774e-01   1.76921443e+00   1.42090601e-01   7.33406651e+00]
cost = 0.92877352085

input = [ 113.82395707  170.07337194    1.40719634    0.97780072    0.45524235
    1.66167718    0.20598009    7.78547546]
cost = 0.784058373732

input = [  1.11783473e+02   1.59412510e+02   1.52303757e+00   1.02657801e+00
   4.29477695e-01   2.24182174e+00   1.32461417e-01   8.98761364e+00]
cost = 0.714135179656

input = [  1.11599112e+02   1.58727451e+02   1.54439142e+00   1.00654608e+00
   3.95584149e-01   2.67942709e+00   7.99775712e-02   5.97351035e+00]
cost = 0.707946747309

input = [  1.12920686e+02   1.61574035e+02   1.52422162e+00   1.00819675e+00
   4.55910549e-01   2.65903369e+00   9.23136904e-02   6.01041591e+00]
cost = 0.670378962203

input = [  1.12985487e+02   1.61527467e+02   1.53352287e+00   1.02508346e+00
   4.79475355e-01   2.47739391e+00   1.14726959e-01   6.88822448e+00]
cost = 0.658859628523

Idea: use this complete optimization process to show that e.g. altitude vs range profile cannot produce results as good as drag vs energy
